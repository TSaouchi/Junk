import java.util.Objects;

public final class XmlSanitizer {

    private XmlSanitizer() {
        // Utility class, prevent instantiation
    }

    /**
     * Removes invalid XML 1.0 characters.
     */
    public static String sanitize(String xml) {
        if (xml == null || xml.isEmpty()) {
            return xml;
        }
        StringBuilder sb = new StringBuilder(xml.length());
        for (int i = 0; i < xml.length(); i++) {
            char c = xml.charAt(i);
            if (isValidXmlChar(c)) {
                sb.append(c);
            }
        }
        return sb.toString();
    }

    /**
     * Normalizes empty tags like <tag></tag> into self-closing <tag/>.
     */
    public static String normalizeEmptyTags(String xml) {
        if (xml == null) return null;
        return xml.replaceAll("<(\\w+)([^>]*)>\\s*</\\1>", "<$1$2/>");
    }

    /**
     * Removes empty tags like <tag></tag> completely.
     */
    public static String removeEmptyTags(String xml) {
        if (xml == null) return null;
        return xml.replaceAll("<(\\w+)([^>]*)>\\s*</\\1>", "");
    }

    /**
     * Fixes invalid spaces inside tag names, e.g. < tag > â†’ <tag>.
     */
    public static String fixTagNameSpaces(String xml) {
        if (xml == null) return null;

        // Opening tags: < tag ... > -> <tag ... >
        xml = xml.replaceAll("<\\s+(\\w+)([^>]*)>", "<$1$2>");

        // Closing tags: </ tag > -> </tag>
        xml = xml.replaceAll("</\\s+(\\w+)\\s+>", "</$1>");

        return xml;
    }

    private static boolean isValidXmlChar(char c) {
        return (c == 0x9 || c == 0xA || c == 0xD ||
                (c >= 0x20 && c <= 0xD7FF) ||
                (c >= 0xE000 && c <= 0xFFFD));
    }
}
